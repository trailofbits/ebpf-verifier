# Overview

The eBPF Verifier Harness project seeks to isolate the eBPF verifier from the
Linux kernel in order to allow efficient verification that an eBPF program will
run on various kernel versions. It will also allow for detecting discrepencies
in the eBPF verifier between differen kernel versions.

## Important files:

* runtime.c contains stubbed out/reimplemented functions that verifier.c or a
dependency requires.

* main.c runs the actual harness.

* .h files include additional stubbed out functions/macros.

# General Workflow


## Get the compile commands:

1.  **compile the kernel with clang**
2.  from inside kernel source root dir **run
the scripts/clang-tools/gen_compile_commands.py**
3. **run ebpf-verifier/scripts/compile_included.py** This will read all the
needed bitcode files from bitcode_files.txt and find the appropriate compile
commands in compile_commands.json and modify them to emit bitcode and have
the correct include statements. Writes the final compile commands to
build_bitcode_needed.sh.

## Actually get the bitcode:

1.  run build_bitcode_needed.sh (right now this emits the bitcode files inside
the kernel source)

The verifier is called using the syscall interface.



With kernel source compiled (make LLVM=1) in ~/.../linux_src/ directory.

[1] Get llvm bitcode of required header files.
[2]
